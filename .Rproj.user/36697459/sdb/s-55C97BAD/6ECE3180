{
    "collab_server" : "",
    "contents" : "bib2acad2 <-function (bibfile = \"\", copybib = TRUE, abstract = TRUE, overwrite = FALSE)\n{\n  msg1 <- \"You must specify a .bib file as input for the conversion.\"\n  msg2 <- paste0(\"Cannot find file '\", bibfile, \"'. Check path and/or file name.\")\n  if (bibfile == \"\") {\n    return(message(msg1))\n  }\n  if (!file.exists(bibfile)) {\n    return(message(msg2))\n  }\n  outfold <- \"my-md-folder\"\n  if (copybib) {\n    bibfold <- \"my-bib-folder\"\n  }\n  dir.create(\"my-md-folder\", showWarnings = FALSE)\n  dir.create(\"my-bib-folder\", showWarnings = FALSE)\n  mypubs <- RefManageR::ReadBib(bibfile, check = \"warn\", .Encoding = \"UTF-8\")\n  mypubs <- as.data.frame(mypubs)\n  mypubs$key <- rownames(mypubs)\n  mypubs <- dplyr::mutate(mypubs, pubtype = dplyr::case_when(bibtype ==\n                                                               \"Article\" ~ \"2\", bibtype == \"Article in Press\" ~ \"2\",\n                                                             bibtype == \"InProceedings\" ~ \"1\", bibtype == \"Proceedings\" ~\n                                                               \"1\", bibtype == \"Conference\" ~ \"1\", bibtype == \"Conference Paper\" ~\n                                                               \"1\", bibtype == \"MastersThesis\" ~ \"3\", bibtype ==\n                                                               \"PhdThesis\" ~ \"3\", bibtype == \"Manual\" ~ \"4\", bibtype ==\n                                                               \"TechReport\" ~ \"4\", bibtype == \"Book\" ~ \"5\", bibtype ==\n                                                               \"InCollection\" ~ \"6\", bibtype == \"InBook\" ~ \"6\",\n                                                             bibtype == \"Misc\" ~ \"0\", TRUE ~ \"0\"))\n  create_md <- function(x) {\n    if (!is.na(x[[\"year\"]])) {\n      x[[\"date\"]] <- paste0(x[[\"year\"]], \"-01-01\")\n    }\n    else {\n      x[[\"date\"]] <- \"2999-01-01\"\n    }\n    filename_md <- paste0(x[[\"key\"]], \".md\")\n    if (!file.exists(file.path(outfold, filename_md)) | overwrite) {\n      fileConn <- file.path(outfold, filename_md)\n      write(\"+++\", fileConn)\n      write(paste0(\"title = \\\"\", cleanStr(x[[\"title\"]]),\n                   \"\\\"\"), fileConn, append = T)\n      write(paste0(\"date = \\\"\", x[[\"date\"]], \"\\\"\"), fileConn,\n            append = T)\n      write(paste0(\"publication_types = [\\\"\", x[[\"pubtype\"]],\n                   \"\\\"]\"), fileConn, append = T)\n      if (!is.na(x[[\"author\"]])) {\n        authors <- stringr::str_replace_all(stringr::str_squish(x[\"author\"]),\n                                            \" and \", \"\\\", \\\"\")\n        #authors <- stringr::str_remove_all(authors, \"{\")\n        #authors <- stringr::str_remove_all(authors, \"}\")\n        authors <- stringr::str_replace(authors, \"Thomas P.C. Dorlo\",\n                                        \"**Thomas P.C. Dorlo**\")\n        authors <- stringr::str_replace(authors, \"T.P.C. Dorlo\",\n                                        \"**T.P.C. Dorlo**\")\n        authors <- stringi::stri_trans_general(authors,\n                                               \"latin-ascii\")\n        write(paste0(\"authors = [\\\"\", cleanStrA(authors), \"\\\"]\"),\n              fileConn, append = T)\n      }\n      else {\n        editors <- stringr::str_replace_all(stringr::str_squish(x[\"editor\"]),\n                                            \" and \", \"\\\", \\\"\")\n        editors <- stringi::stri_trans_general(editors,\n                                               \"latin-ascii\")\n        write(paste0(\"editors = [\\\"\", editors, \"\\\"]\"),\n              fileConn, append = T)\n      }\n      publication <- NULL\n      if (\"booktitle\" %in% names(x) && !is.na(x[[\"booktitle\"]])) {\n        publication <- paste0(publication, \"In: \", cleanStr(x[[\"booktitle\"]]))\n        if (\"publisher\" %in% names(x) && !is.na(x[[\"publisher\"]])) {\n          publication <- paste0(publication, \", \", cleanStr(x[[\"publisher\"]]))\n        }\n        if (\"address\" %in% names(x) && !is.na(x[[\"address\"]])) {\n          publication <- paste0(publication, \", \", cleanStr(x[[\"address\"]]))\n        }\n        if (\"pages\" %in% names(x) && !is.na(x[[\"pages\"]])) {\n          publication <- paste0(publication, \", _pp. \",\n                                cleanStr(x[[\"pages\"]]), \"_\")\n        }\n      }\n      if (\"journal\" %in% names(x) && !is.na(x[[\"journal\"]])) {\n        publication <- paste0(publication, \"_\", cleanStr(x[[\"journal\"]]), \"_\")\n        #if (\"number\" %in% names(x) && !is.na(x[[\"number\"]])) {\n        #  publication <- paste0(publication, \" \", cleanStr(x[[\"number\"]]))\n        #}\n        #if (\"volume\" %in% names(x) && !is.na(x[[\"volume\"]])) {\n        #  publication <- paste0(publication, \" (\", cleanStr(x[[\"volume\"]]),\n        #                        \") \")\n        #}\n        #if (\"pages\" %in% names(x) && !is.na(x[[\"pages\"]])) {\n        #  publication <- paste0(publication, \": \",\n        #                        cleanStr(x[[\"pages\"]]), \"_\")\n        #}\n        #if (\"doi\" %in% names(x) && !is.na(x[[\"doi\"]])) {\n        #  publication <- paste0(publication, \", \", paste0(\"https://doi.org/\",\n        #                                                  cleanStr(x[[\"doi\"]])))\n        #}\n        #if (\"url\" %in% names(x) && !is.na(x[[\"url\"]])) {\n        #  publication <- paste0(publication, \", \", cleanStr(x[[\"url\"]]))\n        #}\n      }\n      write(paste0(\"publication = \\\"\", publication, \"\\\"\"),\n            fileConn, append = T)\n      if ((abstract) && \"abstract\" %in% names(x) && !is.na(x[[\"abstract\"]])) {\n        write(paste0(\"abstract = \\\"\", cleanStr(x[[\"abstract\"]]),\n                     \"\\\"\"), fileConn, append = T)\n      }\n      else {\n        write(\"abstract = \\\"\\\"\", fileConn, append = T)\n      }\n\n      if (\"doi\" %in% names(x) && !is.na(x[[\"doi\"]])) {\n        write(paste0(\"doi = \\\"\", cleanStr(x[[\"doi\"]]),\n                     \"\\\"\"), fileConn, append = T)\n      }\n      else {\n        write(\"doi = \\\"\\\"\", fileConn, append = T)\n      }\n\n      write(paste0(\"abstract_short = \\\"\", \"\\\"\"), fileConn,\n            append = T)\n      write(\"image_preview = \\\"\\\"\", fileConn, append = T)\n      write(\"selected = false\", fileConn, append = T)\n      write(\"projects = []\", fileConn, append = T)\n      write(\"tags = []\", fileConn, append = T)\n      write(\"url_pdf = \\\"\\\"\", fileConn, append = T)\n      write(\"url_preprint = \\\"\\\"\", fileConn, append = T)\n      write(\"url_code = \\\"\\\"\", fileConn, append = T)\n      write(\"url_dataset = \\\"\\\"\", fileConn, append = T)\n      write(\"url_project = \\\"\\\"\", fileConn, append = T)\n      write(\"url_slides = \\\"\\\"\", fileConn, append = T)\n      write(\"url_video = \\\"\\\"\", fileConn, append = T)\n      write(\"url_poster = \\\"\\\"\", fileConn, append = T)\n      write(\"url_source = \\\"\\\"\", fileConn, append = T)\n      write(\"math = true\", fileConn, append = T)\n      write(\"highlight = true\", fileConn, append = T)\n      write(\"[header]\", fileConn, append = T)\n      write(\"image = \\\"\\\"\", fileConn, append = T)\n      write(\"caption = \\\"\\\"\", fileConn, append = T)\n      write(\"+++\", fileConn, append = T)\n    }\n    if (copybib) {\n      filename_bib <- (gsub(\".md\", \".bib\", filename_md))\n      y <- as.list(x)\n      y[\"pubtype\"] <- NULL\n      y <- RefManageR::as.BibEntry(y)\n      if (!file.exists(file.path(bibfold, filename_bib)) |\n          overwrite) {\n        RefManageR::WriteBib(y, file = file.path(bibfold,\n                                                 filename_bib), verbose = FALSE)\n      }\n    }\n  }\n  pb <- pbapply::startpb(min = 0, max = nrow(mypubs))\n  pbapply::pbapply(mypubs, FUN = function(x) create_md(x),\n                   MARGIN = 1)\n  pbapply::closepb(pb)\n}\n\ncleanStr <- function(str) {\n  # if special character has in front a \"\\\": replace it with \"\\\\\\\\\"\n  str <- gsub('\\\\', '\\\\\\\\', str, fixed = TRUE)\n  # delete all \"{\" and \"}\" in old bibtex files\n  str <- gsub(\"[{}]\", '', str)\n  # replace all inline quotes '\"' with \"four '\\\\\\\\\"'\n  str <- gsub('\"', '\\\\\\\\\"', str)\n  # delete extra lines, tabs and spaces\n  # (especially important with field 'abstract')\n  # and return the cleaned string\n  return(stringr::str_squish(str))\n}\n\ncleanStrA <- function(str) {\n  # if special character has in front a \"\\\": replace it with \"\\\\\\\\\"\n  str <- gsub('\\\\', '\\\\\\\\', str, fixed = TRUE)\n  # delete all \"{\" and \"}\" in old bibtex files\n  str <- gsub(\"[{}]\", '', str)\n  # replace all inline quotes '\"' with \"four '\\\\\\\\\"'\n  #str <- gsub('\"', '\\\\\\\\\"', str)\n  # delete extra lines, tabs and spaces\n  # (especially important with field 'abstract')\n  # and return the cleaned string\n  return(stringr::str_squish(str))\n}\n\n\nopendir <- function(dir = getwd()){\n  if (.Platform['OS.type'] == \"windows\"){\n    shell.exec(dir)\n  } else {\n    system(paste(Sys.getenv(\"R_BROWSER\"), dir))\n  }\n}\n",
    "created" : 1550575790192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2702888377",
    "id" : "6ECE3180",
    "lastKnownWriteTime" : 1550578652,
    "last_content_update" : 1550578652575,
    "path" : "C:/Users/t.dorlo/Dropbox/Site/academic-kickstart-master/r/bibtex_alt.r",
    "project_path" : "r/bibtex_alt.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}